#!/bin/bash

# Create xseveral file manager  windows so that thereafter the key binding that created them
# merely visits the workspace.
# This script pass a variable length url list starting in $3.

# $1 is ${workspace}:${maxinstances}
# $2 is ${delay}
# $3,$4,$5 optional folders

# Thunar and pcmanfm-qt seem OK for fedora39, cut do avoid pcmanfm. Thunar "needs" Gigolo while
# pcmanfm-qt does not. My cheap and cheerful algorithm launches gigolo instead of a 3rd Thunar.
# ----------------------------------------------------------------------------------------------------------
debug=/tmp/debug
echo '----' > $debug
# packed parameters
case "$2" in
    (:[1-9][0-9])
        delay=${2:1:2}
        ;;
    (:[1-9])
        delay=${2:1:1}
        ;;
    ([1-9][0-9])
        delay=${2:0:2}
        ;;
    ([1-9])
        delay=${2:0:1}
        ;;
    (*)
        echo "bad arg2" >> $debug
        exit 1
        ;;
esac
case "${1:-55}" in
    ([0-9][0-9]:[1-9])
        ws=${1:0:2}
        swaymsg "workspace --no-auto-back-and-forth number $ws"
        sleep 2s
        maxinstances=${1:3:1}
        ;;
    (*)
        echo "bad arg1" >> $debug
        exit 1
        ;;
esac
# ------------------------------------------------------------------------------------------------------
echo "workspace $ws" >> $debug
list=$(swaymsg -t get_workspaces -p | grep -A3 focused )
echo $list >> $debug
represent=$(echo $list | grep Represent | sed 's/\(\[\|\]\)/\n/g')
instances=$(echo $represent | sed 's/\(\[\|\]\)/\n/g' | grep -c -E \(pcmanfm-qt\|thunar\|gigolo\))
echo "$instances of $maxinstances" >> $debug
case "$maxinstances" in
    (1|2|3|4|5|6)
    ;;
    (*)
        echo "bad maxinstances $maxinstances -gt 6" >> $debug
        ;;
esac
# ------------------------------------------------------------------------------------------------------
echo "ready :-)" >> $debug
count=$(( instances ))
while true
do
    index=$(( maxinstances - count ))
    echo "index $index" >> $debug
    case "$index" in
        (0)
            echo "done :-)" >> $debug
            exit 0
            ;;
        (1)
            folder=${3:-xyzzy}
            ;;
        (2)
            folder=${4:-xyzzy}
            ;;
        (3)
            folder=${5:-xyzzy}
            ;;
        (4)
            folder=${6:-xyzzy}
            ;;
        (5)
            folder=${7:-xyzzy}
            ;;
        (6)
            folder=${8:-xyzzy}
            ;;
        (*)
            folder=xyzzy
            ;;
    esac
    case "$folder" in
        (file:///*|/*|xyzzy)
            # open at user supplied arbitrary folder
            if [ $index -eq 2 ]; then
                swaymsg "exec gio launch /home/ellathecat/Desktop/gigolo.desktop"
            else
                swaymsg "exec gio launch /home/ellathecat/Desktop/thunar.desktop ${folder/xyzzy/}"
            fi
            sleep 3s
            frame=$(( count - instances ))
            echo "frame $frame" >> $debug
            swaymsg "title_format \"workspace $ws frame $frame %title\""
            swaymsg "mark --replace \"$ws$frame\""
            sleep 1.5s
            swaymsg "move container to workspace $ws"
            # ---------------------------------------------------------- B
            ;;
        (Kaiju|Orion|Titan|Osaka|Tokyo|Wolf359|_*)
            # Use symbolic links found in home folder. Names of disk drives lead underscore optional.
            # The underscore is stripped and prepended so avoid using it inside names.
            if [ $index -eq 2 ]; then
                swaymsg "exec gio launch /home/ellathecat/Desktop/gigolo.desktop"
            else
                swaymsg "exec gio launch /home/ellathecat/Desktop/thunar.desktop ${HOME}/_${folder/_/}"
            fi
            # ---------------------------------------------------------- P
            # Block PQ below is a copy of block AB above.
            # ---------------------------------------------------------- P
            sleep 2s
            frame=$(( count - instances ))
            echo "frame $frame" >> $debug
            swaymsg "title_format \"workspace $ws frame $frame %title\""
            swaymsg "mark --replace \"$ws$frame\""
            sleep 1.5s
            swaymsg "move container to workspace $ws"
            # ---------------------------------------------------------- Q
            ;;
        (*)
            echo "cannot recognise shortcut name or absolute path >$folder<" >> $debug
            # The script can't exit when a loop is not finished. Fail this pass silently but gracefully
            # regardless of index. Don't second guess the folder.
            ;;
    esac
    # --------------------------------------------------------------------------------------------------
    count=$(( count=count+1 ))
    # --------------------------------------------------------------------------------------------------
done
exit 1

#
# Done.
#
