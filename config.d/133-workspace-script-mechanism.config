# -*- Mode: Shell-script-mode
# This file is another not so big comment, this time about the concept of # "workspace scripts" in this
# sway configuration.
# ------------------------------------------------------------------------------------------------------

# If the user is on workspace A looking at container C, and issues "move container to workspace B, then
# shortly afterwards C disappears from A and re-appears on B. The user remains on A. The command slot
# implementation for this configuration adds "Workspace C" such that the user's viewpoint tracks the
# container.

# The Visit Workspace command slots shows a script (various types) being called upon changing to the target
# workspace. Let's look at numbers 30 through 39 to illusrate. The script for workspace 33 starts an
# emacsserver, please accept that as an axiom so we can bootstrap the explanation.

# The script for workspaces 30-32 and 34-39 is the same script, we don't want to be writing a custom script
# for every workspace. On  the user's first visit to the workspace, the script starts one or more
# emacslients, the number of instances is passed as a parameter, it knows which workspace its emacsclients
# are running in. On the user's subsequent visit, it merely focuses the workspace UNLESS any instances have
# died, in which case it wll launch fresh instances to keep the population at the specfied number.

# Workspace scripts have been prototyped for emacsclients, firefox and pcmanfm. The maximum population is a
# varied per workspace but typically for 10 workspaces 1+1+1+1 + 2+2+2+2 + 3+3 = 18 windows can be managed
# this way. Because the workspace is not passed as a parameter you can move instances around.

# ------------------------------------------------------------------------------------------------------
#
# Done.
#
