
# -*- Mode: Shell-script -*-
# mod4-bindings.config
# ------------------------------------------------------------------------------------------------------
# Please understand that this set of bindings for default mode and the set of bindings for an out of the
# box install of sway or i3 each provides more-or-less the same set of commands, so you could have the
# out-of-the-box ones here instead. I don't want this project to be dismissed on the grounds of not
# having the familiar bindings. To avoid this, I intend to provide an alternative that can replace this
# file, but not in the short term.
# -----------------------------------------------------------------------------------------------------

# The use of $mod versus $modshift bindings adopts the unwritten rules common to sway and i3 configs.
set $modshift Mod4+Shift

# $mod+Shift+q everywhere, never $mod+q, never q. $mod is Mod4. Kill command.
bindsym --release --no-repeat $mod+Shift+q mode "$reaper"

# The various ROFI menus are themed to slide in and out of the left edge of the screen. These are the
# primary and secondary menus. See 105-special-keys where they are also bound to XF86AudioPrev and
# XF86AudioNext, that is, to Fn+A and Fn+S, There ia a symmetry of Mod4 (trl keycap) and Fn.
#
# Windows Drun Run - running Window List and Applications List.
bindsym $mod+z $roficwdr
# Windows Filebrowser Secure shell - running Window List and content Launcher.
bindsym $mod+x $roficwfs

# Pressed repeatedly, this alternates between the current and previous workspaces in ping-pong fashion.
# The functions bound to keys q and o have been swapped here to facilitate back_and_forth one handed.
bindsym $mod+q workspace back_and_forth

# Left WASD cursor keypad.
bindsym $mod+w focus up
bindsym $mod+a focus left
bindsym $mod+s focus down
bindsym $mod+d focus right
# Right WASD-style cursor keypad.
bindsym $mod+i move up
bindsym $mod+j move left
bindsym $mod+k move down
bindsym $mod+l move right
# Central WASD-style cursor keypad.
bindsym $mod+t resize shrink height 108 px or 10 ppt
bindsym $mod+f resize shrink width 192 px or 10 ppt
bindsym $mod+g resize grow height 108 px or 10 ppt
bindsym $mod+h resize grow width 192 px or 10 ppt

# QWERTY row adjacent-to or in-between inverted tees
bindsym $mod+e move container to output left
bindsym $mod+r move container to output right
bindsym $mod+y move workspace to output left
bindsym $mod+u move workspace to output right

# Query which workspaces are on each output, with option to move one of the workspaces to another
# output. Uses a spcial rofi menu. THIS IS A RADICAL TWEAK OF DMENU ON ROFI. The use c ase is to find
# and focus workspaces you cannot see and whose woekspace tabs you cannot see.
bindsym $mod+o exec map-ws-to-op-menu.script
#       $mod+p is bound on 4th row.

# Bindings for the ZXC (4th) row. These five mimic the numpad arithmetic operator keys (qv), Recall that
# the first two do 'visit workspace' and 'container to workspace' and are keys V and C. The last three
# keys have keycaps - + enter, alias m p n for minus (subtract) plus (add) and enter.
bindsym $mod+v mode $divkey
bindsym $mod+c mode $mulkey
bindsym $mod+m mode $subkey
bindsym $mod+p mode $addkey
bindsym $mod+n mode $ntrkey
# As you read on, you'll realise that these keys could be re-assigned.

# EllaTheCat prefers these function keys over CVMPN in ease-of-use in $MenuKeys mode, but here we are in
# default mode, so the function keys are no longer available for applications to use. To remedy that in
# part we can use escapes, see 114-escapes-mode.
bindsym F1 mode $divkey
bindsym F2 mode $mulkey
bindsym F3 mode $subkey
bindsym F4 mode $addkey
bindsym F5 mode $ntrkey
# As you read on, you'll realise that these keys are deprecated, you can re-assign them.

# Were we to insist on a $mod key with Function keys, we would have to press $mod and Fn on opposite
# sides of a compact keyboard. We are in luck: numbers and function keys are co-located on keycaps so
# Fn+digit as above is a right handed modifier in effect, which leads us to consider the left handed
# modifier equivalent, which is $mod+digit, very nice.
bindsym $mod+1 mode $divkey
bindsym $mod+2 mode $mulkey
bindsym $mod+3 mode $subkey
bindsym $mod+4 mode $addkey
bindsym $mod+5 mode $ntrkey
# Having read the pros and cons, you'll understand why these keys are preferred.

# The corresponding modes keep their original names based on the numpad keys they were once bound to,
# you'll understand when you see there are over a hundred of them! If it ain't broke don't fix it.

# BMI unhides the bars.
bindsym $mod+b mode default, bar mode toggle;

# Audio Volumes.
bindsym XF86AudioMute exec pactl set-sink-mute @DEFAULT_SINK@ toggle
bindsym XF86AudioLowerVolume exec pactl set-sink-volume @DEFAULT_SINK@ -3%
bindsym XF86AudioRaiseVolume exec pactl set-sink-volume @DEFAULT_SINK@ +3%

# EllaTheCat has set vlc and mpv to turn their tab showing video to RED until it has been focused,
# similarly emacsclient reacts to loading images. Press the key to activate the oldest RED tab.
bindsym $modshift+u [urgent="oldest"] focus
bindsym $modshift+w [urgent="newest"] focus

# Move focus to the parent container.
bindsym $modshift+p focus parent
bindsym $modshift+o focus child

# Layouts, mnemonic, nothing fancy.
bindsym $modshift+s mode $MenuKeys, layout toggle stacking split ;
bindsym $modshift+t mode $MenuKeys, layout toggle tabbed split ;

# Move the currently focused window to the scratchpad.
bindsym $modshift+equal move scratchpad

# Show the next scratchpad window or hide the focused scratchpad window.
# If there are multiple scratchpad windows, this command cycles through them.
bindsym $mod+minus scratchpad show

# Floating vs tiling. Don't aim for compatibility here, it gets messy. Sticky toggle.
bindsym $modshift+j floating toggle ;
bindsym $modshift+k focus mode_toggle ;
bindsym $modshift+l sticky toggle ;

# Make the current focus fullscreen on one or all monitors.
bindsym $modshift+f fullscreen toggle
bindsym $modshift+g fullscreen toggle global
# Alternatives to fullscreen global.
bindsym $modshift+h floating enable, resize set width  960 px height 1000 px, move position -1920 px 0 px;
bindsym $modshift+c floating enable, resize set width 1920 px height 1000 px, move position -1920 px 0 px;
bindsym $modshift+v floating enable, resize set width 2880 px height 1000 px, move position -1920 px 0 px;
bindsym $modshift+b floating enable, resize set width 3840 px height 1000 px, move position -1920 px 0 px;

# Rename any workspace, the one to be renamed does not have to be the current workspace. The new name is
# only applied if no such workspace exists, UNLESS swapping workspaces satisfies the renaming
# requirement. Conversely this is the swap workspaces function. The old and new names are selected using
# a menu.
bindsym $modshift+r  exec '$ETC_SWAY_SCRIPTS_DIR/rename-or-swap-ws-menus.script'

# ------------------------------------------------------------------------------------------------------

#
# Done.
#
